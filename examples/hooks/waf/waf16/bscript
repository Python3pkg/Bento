#! /usr/bin/env python
import os
import sys

from bento.commands.hooks \
    import \
        pre_configure, pre_build, override, post_configure, post_build
from bento.commands.context \
    import \
        CONTEXT_REGISTRY, ConfigureContext, BuildContext

if os.environ.has_key("WAFDIR"):
    WAFDIR = os.path.join(os.environ["WAFDIR"], "waflib")
else:
    WAFDIR = os.path.join(os.getcwd(), "waflib")

WAF_CONFIG_LOG = 'config.log'

__HAS_RUN = False
def _init():
    global __HAS_RUN
    if __HAS_RUN:
        return
    else:
        __HAS_RUN = True

    tooldir = os.path.join(WAFDIR, "Tools")

    sys.path.insert(0, os.path.dirname(WAFDIR))
    sys.path.insert(0, tooldir)
    cwd = os.getcwd()

    from waflib.Context \
        import \
            create_context
    from waflib.Options \
        import \
            OptionsContext
    from waflib.Configure \
        import \
            ConfigurationContext
    from waflib import Options
    from waflib import Context
    from waflib import Logs
    from waflib import Build

    Logs.init_log()
    opts = OptionsContext()
    opts.parse_args()
    opts.load("compiler_c")
    Options.options.check_c_compiler = "gcc"
    class FakeModule(object):
        pass
    Context.g_module = FakeModule
    Context.g_module.root_path = os.path.abspath(__file__)
    Context.g_module.top = os.getcwd()
    Context.g_module.out = os.path.join(os.getcwd(), "build")

    Context.top_dir = os.getcwd()
    Context.out_dir = os.path.join(os.getcwd(), "build")

def _init_configure(ctx):
    _init()
    from waflib.Context \
        import \
            create_context
    from waflib import Options
    from waflib import Build
    from waflib import Logs
    waf_context = create_context("configure")
    waf_context.options = Options.options
    #waf_context.execute()
    waf_context.init_dirs()
    waf_context.cachedir = waf_context.bldnode.make_node(Build.CACHE_DIR)
    waf_context.cachedir.mkdir()

    path = os.path.join(waf_context.bldnode.abspath(), WAF_CONFIG_LOG)
    waf_context.logger = Logs.make_logger(path, 'cfg')
    ctx.waf_context = waf_context

def _init_build(ctx):
    _init()
    from waflib.Context \
        import \
            create_context
    waf_context = create_context("build")
    waf_context.restore()
    if not waf_context.all_envs:
        waf_context.load_envs()
    ctx.waf_context = waf_context

#@pre_configure()
#def pconfigure(bento_conf):
#    _init(bento_conf, "configure")
#    
@post_configure()
def poconfigure(bento_conf):
    conf = bento_conf.waf_context
    
    conf.load("compiler_c")
    conf.load("python")
    conf.check_python_version((2,4,2))
    conf.check_python_headers()

    conf.store()
    
def ext_name_to_path(name):
    """Convert extension name to path - the path does not include the
    file extension

    Example: foo.bar -> foo/bar
    """
    return name.replace('.', os.path.sep)

def get_build_products(bld):
    outputs = {}
    for group in bld.groups:
        for task_gen in group:
            if hasattr(task_gen, "link_task"):
                name = task_gen.name.replace(os.sep, ".")
                outputs[name] = task_gen.link_task.outputs
    return outputs

@post_build()
def pobuild(bento_bld):
    from bento.core.subpackage import get_extensions
    bld = bento_bld.waf_context
    pkg = bento_bld.pkg

    for name, extension in get_extensions(pkg, bento_bld.top_node).iteritems():
        bld(features='c cshlib pyext', source=extension.sources,
            target=ext_name_to_path(extension.name))
    bld.compile()

    outputs = get_build_products(bld)

class WafConfigureContext(ConfigureContext):
    def __init__(self, *a, **kw):
        super(WafConfigureContext, self).__init__(*a, **kw)
        _init_configure(self)

class WafBuildContext(BuildContext):
    build_type = "waf"
    def __init__(self, *a, **kw):
        super(WafBuildContext, self).__init__(*a, **kw)
        _init_build(self)

def startup():
    CONTEXT_REGISTRY.register("configure", WafConfigureContext)
    CONTEXT_REGISTRY.register("build", WafBuildContext)
