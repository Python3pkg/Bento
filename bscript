import os
import sys
import subprocess

from bento.commands.hooks \
    import \
        pre_configure, command
from bento.core.package \
    import \
        file_list
from bento.commands.errors \
    import \
        CommandExecutionFailure
from bento.commands.core \
    import \
        Command
from bento.core.utils \
    import \
        pprint

import yaku.context
import yaku.scheduler

@pre_configure()
def pconfigure(ctx):
    ctx.yaku_configure_ctx.load_tool("python_2to3")

PY3K_BUILD = os.path.join("build", "py3k")

@command()
def run_2to3(ctx):
    """\
Purpose: run 2to3 on bento.
Usage: bentomaker run_2to3 [OPTIONS]"""
    bld = yaku.context.get_bld()
    builder = bld.builders["python_2to3"]

    builder.env["2TO3_EXCLUDE_LIST"] = [
        os.path.join("bento", "private", "_ply", "ply", f) for f in \
        os.listdir(os.path.join("bento", "private", "_ply", "ply"))
        if f.endswith(".py")]

    files = file_list(ctx.pkg, bld.src_root)
    builder.convert("bento_2to3", files)

    try:
        yaku.scheduler.run_tasks(bld)
    finally:
        bld.store()

    msg = """\
python 3 version of bento is now available in build/py3k. You can install bento
for python 3 as follows:

    python3 -m bentomakerlib.bentomaker configure # add custom options here
    python3 -m bentomakerlib.bentomaker install

"""
    pprint('BLUE', msg)

class TestCommand(Command):
    def run(self, opts):
        pprint('BLUE', "Running test command....")
        saved = os.getcwd()

        cmd = ["nosetests", "-s", "-v", "bento"]
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = p.communicate()
        if p.returncode != 0:
            print stderr
            return p.returncode
        else:
            print stderr

def startup(context):
    context.register_command("test", TestCommand)

    context.set_before("run_2to3", "configure")
