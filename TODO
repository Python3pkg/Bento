..  Wed Nov 11 01:06:58 JST 2009

What's needed for a first prototype
===================================

Obviously a lot. Before something which is worths putting out there, I would
like to implement the following:

Fully static package description
--------------------------------

We delegate everything related to build and install to distutils,
and we just use the config file as input instead of writing metadata in
setup.py. Goal: building hello world packages with C extensions with a 2 lines
setup.py and the package description entirely defined in the metadata.

This is mostly done. What's missing::

	.# Documentation tagging
	.# Data tagging
	.# Data vs. extra: I should familiarize myself with pkg_resources

Build and Install requirements sections
---------------------------------------

Second step: build and install requirements. Once handled at
parsing/description level, we may build a small tool on top of say pip to
download all the necessasry packages - this would be a toy utility.

This requires::

        .# Version handling: see distutils and the new PEP 386.
        .# Parsing requirements in config file
        .# Writing a tool on top of pip to download the build or install
           requirements ala pip

Simple build system
-------------------

Need to think about this, but basically::

	.# Use configure/build/install: no commands anymore, all steps knows
	   about all options
	.# Should support all autoconf dir-related options (includedir, etc...)
	.# Should support building sphinx doc
	.# Reuse distutils compiler classes here ? At least create an abstract
	   description of compiler options (so that both MS and Unix compilers
	   can be used consistently)
	.# Ideally: should support building eggs, automatic testing, no-install
	   (develop) mode

Later
=====

Things to think about

Tools integration
-----------------

Example: paver-like tool integration, scons/waf integration

Distutils compatibility story
-----------------------------

Distutils compat: from config file to setup.py, from setup.py to config file

Distribution content description
--------------------------------

The current MANIFEST mechanism is insane, as is using the VCS to determine
files to include. But some people want it::

        .# How to support the following use-case: someones use the VCS to
        generate the sdist content, I want to reproduce it from the sdist only.
        .# Is a update_sdist command to update the content from the VCS
        acceptable ?
        .# Description needs to be rich enough so that following the FSH is
        possible

Export to 3rd party distribution tools
--------------------------------------

nsis, visual studio, deb, rpm, etc... What matters is how to plug-in new
exporters.
