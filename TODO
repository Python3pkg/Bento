..  Wed Nov 11 01:06:58 JST 2009

What's needed for a first prototype
===================================

Basic requirements are listed here

Fully static package description
--------------------------------

We delegate everything related to build and install to distutils,
and we just use the config file as input instead of writing metadata in
setup.py. Goal: building hello world packages with C extensions with a 2 lines
setup.py and the package description entirely defined in the metadata.

Status
~~~~~~

This is mostly done. What's missing::

	.# Documentation tagging
	.# Data tagging
	.# Data vs. extra: I should familiarize myself with pkg_resources

Problems::

        .# describing data files (ExtraSourceFiles field) in a Distribution
           file (MANIFEST[.in] mess)
        .# converting back from .info file to setup.py

Simple build system
-------------------

Based on a configure/build/install-like scheme::

        .# No support for compiled extension yet
        .# Python files simply copied into install directory
        .# No commands anymore, every step know about all options (through
           configure)
        .# Should support all autoconf dir-related options (includedir, etc...)
        .# Think about extensibility from the start: pre/post hooks for each
           step, how to add steps maybe ?

Requires::

        .# Make flag and paths input/output consistent in cabal_parser, so that
           they can easily be used to describe options (to configure command
           mostly)
        .# Decide on internal representation of paths and possible stages of
           substitution to interdependencies between paths
        .# Decide of a format to dump/restore configure options
        .# Implement build and install from package description

More advanced features
~~~~~~~~~~~~~~~~~~~~~~

Things which are necessary for realistically replace distutils/setuptools::

        .# building C/C++ extensions
        .# building eggs
        .# building wininst, msi
        .# no-install (develop) mode
        .# interoperation with pip-like tool ?

Goodies::

        .# Should support building sphinx doc
        .# Should support check-like step (build sdist, build from sdist, and
           test from sdist)
        .# Add scons builders for simple scons-based build

Build and Install requirements sections
---------------------------------------

Second step: build and install requirements. Once handled at
parsing/description level, we may build a small tool on top of say pip to
download all the necessasry packages - this would be a toy utility.

This requires::

        .# Version handling: see distutils and the new PEP 386.
        .# Parsing requirements in config file

Later
=====

Things to think about

Tools integration
-----------------

Example: paver-like tool integration, scons/waf integration

Distutils compatibility story
-----------------------------

Distutils compat: from config file to setup.py, from setup.py to config file

Distribution content description
--------------------------------

The current MANIFEST mechanism is insane, as is using the VCS to determine
files to include. But some people want it::

        .# How to support the following use-case: someones use the VCS to
        generate the sdist content, I want to reproduce it from the sdist only.
        .# Is a update_sdist command to update the content from the VCS
        acceptable ?
        .# Description needs to be rich enough so that following the FSH is
        possible

Export to 3rd party distribution tools
--------------------------------------

nsis, visual studio, deb, rpm, etc... What matters is how to plug-in new
exporters.

Install/Reinstall/Rebuild/Clean problem
---------------------------------------
